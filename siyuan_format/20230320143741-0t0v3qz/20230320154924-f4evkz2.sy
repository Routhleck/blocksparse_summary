{
	"ID": "20230320154924-f4evkz2",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230320154924-f4evkz2",
		"title": "cudaError_t hgemm_blocksparse_nt_128_dds",
		"updated": "20230320154936"
	},
	"Children": [
		{
			"ID": "20230320154935-2p9ktq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230320154935-2p9ktq8",
				"updated": "20230320154936"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "cudaError_t hgemm_blocksparse_nt_128_dds(const ehalf* X, const ehalf* E, ehalf* U, bsmm_params* params)\n{\n    struct Plist\u003cehalf,8\u003e* X8 = (struct Plist\u003cehalf,8\u003e*)X;\n    struct Plist\u003cehalf,8\u003e* E8 = (struct Plist\u003cehalf,8\u003e*)E;\n\n    const uint2* Lut = (const uint2*)params-\u003eLut;\n    uint accumulate  = params-\u003ebeta == 1.0f;\n    uint pcount8     = params-\u003epcount * 8;\n    uint N           = params-\u003eN;\n    uint loops       = CEIL_DIV(N, 128);\n    bool k128        = (N \u0026 127) == 0;\n\n    dim3 grid(params-\u003eblocks, 1, 1);\n\n    if (params-\u003ebsize == 8)\n    {\n        if (params-\u003eGate == 0)\n        {\n            if (k128)\n                hgemm_blocksparse_8x8x128_nt_dds\u003c true,false\u003e\u003c\u003c\u003cgrid,64,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_8x8x128_nt_dds\u003cfalse,false\u003e\u003c\u003c\u003cgrid,64,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n        else\n        {\n            if (k128)\n                hgemm_blocksparse_8x8x128_nt_dds\u003c true, true\u003e\u003c\u003c\u003cgrid,64,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_8x8x128_nt_dds\u003cfalse, true\u003e\u003c\u003c\u003cgrid,64,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n    }\n    else if (params-\u003ebsize == 16)\n    {\n        if (params-\u003eGate == 0)\n        {\n            if (k128)\n                hgemm_blocksparse_16x16x128_nt_dds\u003c true,false\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_16x16x128_nt_dds\u003cfalse,false\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n        else\n        {\n            if (k128)\n                hgemm_blocksparse_16x16x128_nt_dds\u003c true, true\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_16x16x128_nt_dds\u003cfalse, true\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n    }\n    else if (params-\u003ebsize == 32)\n    {\n        if (params-\u003eGate == 0)\n        {\n            if (k128)\n                hgemm_blocksparse_32x32x128_nt_dds\u003c true,false\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_32x32x128_nt_dds\u003cfalse,false\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n        else\n        {\n            if (k128)\n                hgemm_blocksparse_32x32x128_nt_dds\u003c true, true\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n            else\n                hgemm_blocksparse_32x32x128_nt_dds\u003cfalse, true\u003e\u003c\u003c\u003cgrid,128,0,params-\u003estream\u003e\u003e\u003e(*X8, *E8, U, Lut, params-\u003eGate, pcount8, N, loops, accumulate);\n        }\n    }\n    return cudaPeekAtLastError();\n}\ncudaError_t hgemm_blocksparse_nt_128_dds(const bhalf* X, const bhalf* E, bhalf* U, bsmm_params* params) { return cudaSuccess; }\ncudaError_t hgemm_blocksparse_nt_128_dds(const float* X, const float* E, float* U, bsmm_params* params) { return cudaSuccess; }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}