{
	"ID": "20230320153444-wnqpfgh",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230320153444-wnqpfgh",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230320153456-ibrnlt0\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230320153444-3i3lbz3\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230320153456-ibrnlt0\u0026quot;,\u0026quot;focusStart\u0026quot;:3,\u0026quot;focusEnd\u0026quot;:3}",
		"title": "class BlocksparseReducedDWOp",
		"updated": "20230320163442"
	},
	"Children": [
		{
			"ID": "20230320161952-vdqrg88",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320161952-vdqrg88",
				"updated": "20230320162000"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员方法"
				}
			]
		},
		{
			"ID": "20230320162752-hw0ncso",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230320162752-hw0ncso",
				"updated": "20230320163442"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "返回类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230320162207-clf533f",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "BlocksparseReducedDWOp"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数，初始化类成员变量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230320162216-mb59rig",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "Compute"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "void"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "进行前向计算，输出结果到 OpKernelContext"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230320162000-2lhoegl",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320162000-2lhoegl",
				"updated": "20230320162005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量"
				}
			]
		},
		{
			"ID": "20230320162935-kzxzz9o",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230320162935-kzxzz9o",
				"updated": "20230320162935"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员变量"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bshift"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于指定块的大小，根据"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "bsize"
								},
								{
									"Type": "NodeText",
									"Data": "​属性计算得出"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "norm"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定是否进行归一化"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "axis"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定计算的轴，只支持 0 或 1"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "major_version"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指定 Tensorcore GPU 的版本"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "blk_A"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "uint"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于 cuBLAS 中的 GEMM 计算"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "blk_B"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "uint"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于 cuBLAS 中的 GEMM 计算"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "blk_a"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "uint"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于 cuBLAS 中的 GEMM 计算"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "blk_b"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "uint"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于 cuBLAS 中的 GEMM 计算"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230320162005-7pga9za",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320162005-7pga9za",
				"updated": "20230320162016"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20230320153456-ibrnlt0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230320153456-ibrnlt0",
				"updated": "20230320153456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class BlocksparseReducedDWOp : public OpKernel\n{\npublic:\n    explicit BlocksparseReducedDWOp(OpKernelConstruction* ctx) : OpKernel(ctx), major_version(0)\n    {\n        int bsize;\n        OP_REQUIRES_OK(ctx, ctx-\u003eGetAttr(\"bsize\", \u0026bsize));\n        OP_REQUIRES_OK(ctx, ctx-\u003eGetAttr(\"norm\",  \u0026norm ));\n        OP_REQUIRES_OK(ctx, ctx-\u003eGetAttr(\"axis\",  \u0026axis ));\n        OP_REQUIRES(ctx, axis == 0 || axis == 1, errors::InvalidArgument(\"invalid feature axis, only 0,1 supported.\"));\n        if (axis == 0)\n            OP_REQUIRES(ctx, bsize == 8 || bsize == 16 || bsize == 32, errors::InvalidArgument(\"Only feature axis=0 supports blocksizes: 8,16,32\"));\n        else\n            OP_REQUIRES(ctx, bsize == 32 || bsize == 64, errors::InvalidArgument(\"Only feature axis=0 supports blocksizes: 32,64\"));\n\n        bshift = bsize == 8 ? 3 : bsize == 16 ? 4 : bsize == 32 ? 5 : 6;\n    }\n    void Compute(OpKernelContext* ctx) override\n    {\n        OpInputList x, y;\n        ctx-\u003einput_list( \"x\", \u0026x);\n        ctx-\u003einput_list(\"dy\", \u0026y);\n        uint params = x.size();\n        float scale = ctx-\u003einput(params*2).scalar\u003cfloat\u003e()();\n        OP_REQUIRES(ctx, params \u003c= 8, errors::InvalidArgument(\"No more than 8 inputs allowed.\"));\n\n        uint C  = x[0].dim_size(axis);\n        uint K  = y[0].dim_size(axis);\n        uint bC = C \u003e\u003e bshift;\n        uint bK = K \u003e\u003e bshift;\n        uint N  = x[0].dim_size(1-axis);\n        TensorShape shapeX, shapeY;\n        if (axis == 0)\n        {\n            shapeX.AddDim(bC);\n            shapeY.AddDim(bK);\n        }\n        shapeX.AddDim(params);\n        shapeY.AddDim(params);\n        shapeX.AddDim(N);\n        shapeY.AddDim(N);\n        if (axis == 1)\n        {\n            shapeX.AddDim(bC);\n            shapeY.AddDim(bK);\n        }\n\n        if (major_version == 0)\n        {\n            GetCountSMsVersion(\u0026major_version, NULL);\n            OP_REQUIRES(ctx, major_version \u003e= 7, errors::InvalidArgument(\"Tensorcore GPU required\"));\n\n            OP_REQUIRES(ctx, (bC \u0026 1) == 0 \u0026\u0026 (bK \u0026 1) == 0, errors::InvalidArgument(\"Block reduced feature dim must be multiple of 2.\"));\n\n            ClosestDivisorTo4(axis == 0 ? CEIL_DIV(bC, 32) : CEIL_DIV(bC, 64), true, \u0026blk_a, \u0026blk_A);\n            ClosestDivisorTo4(axis == 0 ? CEIL_DIV(bK, 32) : CEIL_DIV(bK, 64),false, \u0026blk_b, \u0026blk_B);\n        }\n\n        struct Plist\u003cehalf,8\u003e X, Y;\n        for (int i = 0; i \u003c params; ++i)\n        {\n            X.a[i] = (const ehalf*)x[i].flat\u003cEHALF\u003e().data();\n            Y.a[i] = (const ehalf*)y[i].flat\u003cEHALF\u003e().data();\n        }\n\n        float* DW;\n        uint accumulate;\n        if (ctx-\u003enum_inputs() \u003e params*2 + 1)\n        {\n            // accumulate to DW in place\n            accumulate = 1;\n            const Tensor\u0026 dw = ctx-\u003einput(params*2 + 1);\n            ctx-\u003eset_output(0, dw);\n            DW = (float*)dw.flat\u003cfloat\u003e().data();\n        }\n        else\n        {\n            accumulate = 0;\n            Tensor *dw;\n            OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(0, TensorShape({ bC, bK }), \u0026dw));\n            DW = dw-\u003eflat\u003cfloat\u003e().data();\n        }\n        Tensor *redX, *redY;\n        OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(1, shapeX, \u0026redX));\n        OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(2, shapeY, \u0026redY));\n        ehalf* RedX = (ehalf*)redX-\u003eflat\u003cEHALF\u003e().data();\n        ehalf* RedY = (ehalf*)redY-\u003eflat\u003cEHALF\u003e().data();\n\n        CUstream stream = ((CUDAStream*)ctx-\u003eop_device_context()-\u003estream()-\u003eimplementation())-\u003ecuda_stream();\n\n        if (scale != 0.0f)\n        {\n            if (axis == 0)\n            {\n                BlocksparseFeatureReduceCN(stream, RedX, \u0026X, params, C, N, bshift, norm);\n                BlocksparseFeatureReduceCN(stream, RedY, \u0026Y, params, K, N, bshift, norm);\n            }\n            else\n            {\n                BlocksparseFeatureReduceNC(stream, RedX, \u0026X, params, C, N, bshift, norm);\n                BlocksparseFeatureReduceNC(stream, RedY, \u0026Y, params, K, N, bshift, norm);\n            }\n        }\n        if (axis == 0)\n            hGemmNT(stream, RedX, RedY, DW, bC, bK, N*params, blk_A, blk_B, blk_a, blk_b, accumulate, scale);\n        else\n            hGemmTN(stream, RedX, RedY, DW, bC, bK, N*params, blk_A, blk_B, blk_a, blk_b, accumulate, scale);\n    }\n    int  bshift, norm, axis, major_version;\n    uint blk_A, blk_B, blk_a, blk_b;\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230320153444-3i3lbz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230320153444-3i3lbz3",
				"updated": "20230320153444"
			}
		}
	]
}