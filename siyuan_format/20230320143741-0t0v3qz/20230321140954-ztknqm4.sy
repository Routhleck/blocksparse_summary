{
	"ID": "20230321140954-ztknqm4",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230321140954-ztknqm4",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230321140955-ir737rn\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230321141011-b6kn8mc\u0026quot;,\u0026quot;scrollTop\u0026quot;:265,\u0026quot;focusId\u0026quot;:\u0026quot;20230322143312-mta8y8z\u0026quot;,\u0026quot;focusStart\u0026quot;:80,\u0026quot;focusEnd\u0026quot;:80}",
		"title": "class BlocksparseMatmul_NC",
		"updated": "20230322151859"
	},
	"Children": [
		{
			"ID": "20230321140955-ir737rn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230321140955-ir737rn",
				"updated": "20230322151859"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BlocksparseMatmul_NC"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BlocksparseMatmul"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的基础上实现了针对不同转置矩阵的稀疏矩阵乘法，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "将根据不同的输入参数然后直接调用核函数，与之前的类有所不同，直接指定`kernel_name`"
				}
			]
		},
		{
			"ID": "20230322143245-sxyfwr8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230322143245-sxyfwr8",
				"updated": "20230322143258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员方法"
				}
			]
		},
		{
			"ID": "20230322143312-mta8y8z",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230322143312-mta8y8z",
				"updated": "20230322144338"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "返回类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230322143357-cqupe0s",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "BlocksparseMatmul_NC"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数，初始化类成员变量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230322143821-7uhp1vr",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "Xprop_Kernel"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "status"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行Kernel"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230322144315-e3rdzmn",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "Compute"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "status"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "矩阵乘法计算"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230321141011-pq5nvmw",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230321141011-pq5nvmw",
				"updated": "20230322143320"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量"
				}
			]
		},
		{
			"ID": "20230322144048-fdb1xm7",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230322144048-fdb1xm7",
				"updated": "20230322145516"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员变量"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "threads_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA thread 数量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "gridX_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA kernel 的 X 维度"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "gridY_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA kernel 的 Y 维度"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "kernel_name_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "std::string"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA kernel 的名称"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "kernel_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUfunction"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA kernel 的句柄"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "params_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230322113917-npflb1b",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "bsmm_params"
								},
								{
									"Type": "NodeText",
									"Data": "*"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "稀疏矩阵乘法的参数"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "major_"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUDA主版本号"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230321141011-b6kn8mc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230321141011-b6kn8mc",
				"updated": "20230321141011"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003cCTYPE3(TA,TB,TC)\u003e\nclass BlocksparseMatmul_NC : public BlocksparseMatmul\u003cVTYPE3(TA,TB,TC)\u003e\n{\npublic:\n    BlocksparseMatmul_NC(bsmm_params* params, const char* op, int depth, int threads) :\n        BlocksparseMatmul\u003cVTYPE3(TA,TB,TC)\u003e(params), threads_(threads)\n    {\n        const char* dtypeA = std::is_same\u003cTA, ehalf\u003e::value ? \"A10\" : std::is_same\u003cTA, bhalf\u003e::value ? \"A7\": \"A32\";\n        const char* dtypeB = std::is_same\u003cTB, ehalf\u003e::value ? \"B10\" : std::is_same\u003cTB, bhalf\u003e::value ? \"B7\": \"B32\";\n        const char* dtypeC = std::is_same\u003cTC, ehalf\u003e::value ? \"C10\" : std::is_same\u003cTC, bhalf\u003e::value ? \"C7\": \"C32\";\n\n        // int depth;\n        // const char* op;\n        // if      (mode_  == 0) { op = \"fprop\"; depth = 32; threads_ = 128; }\n        // else if (mode_  == 1) { op = \"bprop\"; depth = 32; threads_ = 128; }\n        // else                  { op = \"updat\"; depth =  8; threads_ =  32; }\n\n        char kernel_name[48];\n        sprintf(kernel_name, \"gemm_blocksparse_32x32x%d_%s_%s_%s_%s\", depth, op, dtypeA, dtypeB, dtypeC);\n        kernel_name_ = kernel_name;\n        kernel_ = 0;\n    }\n    Status Xprop_Kernel(const TA* A, const TB* B, TC* C)\n    {\n        GetKernel(kernel_name_, \u0026kernel_);\n        //printf(\"%s %p\\n\", kernel_name_.c_str(), kernel_);\n\n        bsmm_params* params = this-\u003eparams_;\n\n        int gridX = (params-\u003eN \u003e\u003e 5) + ((params-\u003eN \u0026 31) != 0);\n        int gridY = (params-\u003eK \u003e\u003e 5);\n\n        void *args[] = { \u0026params-\u003eLut, \u0026C, \u0026A, \u0026B, \u0026params-\u003ealpha, \u0026params-\u003ebeta, \u0026params-\u003eC, \u0026params-\u003eK, \u0026params-\u003eN };\n\n        CUresult res = cuLaunchKernel(kernel_, gridX, gridY, 1, threads_, 1, 1, params-\u003eshared, params-\u003estream, args, NULL);\n        if (res != CUDA_SUCCESS)\n        {\n            const char* errstr;\n            cuGetErrorString(res, \u0026errstr);\n            return errors::Internal(errstr);\n        }\n        return Status::OK();\n    }\n    virtual Status Compute(const TA* A, const TB* B, TC* C) =0;\n\n    int threads_, gridX_, gridY_;\n    std::string kernel_name_;\n    CUfunction kernel_;\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}