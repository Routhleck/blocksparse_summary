{
	"ID": "20230321140941-eyq3bsp",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230321140941-eyq3bsp",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230321140941-91jwwhj\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230321140950-dve64j0\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230321140941-91jwwhj\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"title": "class BlocksparseMatmulUpdat_CN",
		"updated": "20230322150848"
	},
	"Children": [
		{
			"ID": "20230322150848-uke9kn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230322150848-uke9kn8",
				"updated": "20230322150854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承自父类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230321140826-hnotu2j",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "BlocksparseMatmul"
				},
				{
					"Type": "NodeText",
					"Data": "，并实现更新参数操作"
				}
			]
		},
		{
			"ID": "20230322150848-oug527f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230322150848-oug527f",
				"updated": "20230322150848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本与父类一致，仅仅实现了Compute函数"
				}
			]
		},
		{
			"ID": "20230321140950-dve64j0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230321140950-dve64j0",
				"updated": "20230321140950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003cCTYPE3(TA,TB,TC)\u003e\nclass BlocksparseMatmulUpdat_CN : public BlocksparseMatmul\u003cVTYPE3(TA,TB,TC)\u003e\n{\npublic:\n    BlocksparseMatmulUpdat_CN(bsmm_params* params) :\n        BlocksparseMatmul\u003cVTYPE3(TA,TB,TC)\u003e(params) {}\n\n    virtual Status Compute(const TA* A, const TB* B, TC* C)\n    {\n        if (this-\u003emajor_ == 0)\n            GetCountSMsVersion(\u0026this-\u003emajor_, NULL);\n\n        cudaError_t res;\n        if (this-\u003emajor_ \u003e= 7 \u0026\u0026 std::is_same\u003cTA, ehalf\u003e::value)\n            res = hgemm_blocksparse_nt_dds(A, B, C, this-\u003eparams_);\n        else\n            if (this-\u003eparams_-\u003eGate == NULL)\n                res = BsmmUpdat_CN\u003cVTYPE3(TA,TB,TC)\u003e(A, B, C, this-\u003eparams_);\n            else\n                res = BsmmGatedUpdat_CN\u003cVTYPE3(TA,TB,TC)\u003e(A, B, C, this-\u003eparams_);\n\n        if (cudaSuccess != res)\n            return errors::Internal(cudaGetErrorString(res));\n        return Status::OK();\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}