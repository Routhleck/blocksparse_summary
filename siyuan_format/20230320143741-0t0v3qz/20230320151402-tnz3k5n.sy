{
	"ID": "20230320151402-tnz3k5n",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230320151402-tnz3k5n",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230320151515-9bxu1kt\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230320151516-gnbv2mm\u0026quot;,\u0026quot;scrollTop\u0026quot;:295,\u0026quot;focusId\u0026quot;:\u0026quot;20230320151515-9bxu1kt\u0026quot;,\u0026quot;focusStart\u0026quot;:931,\u0026quot;focusEnd\u0026quot;:931}",
		"title": "class BlocksparseMatmulDGOp",
		"updated": "20230322145658"
	},
	"Children": [
		{
			"ID": "20230321170039-ght9zy2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230321170039-ght9zy2",
				"updated": "20230321170150"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现反向传播操作，计算某个神经网络层的权重矩阵和梯度的矩阵乘法，以及相应的梯度计算"
				}
			]
		},
		{
			"ID": "20230320160719-iiq4at7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320160719-iiq4at7",
				"updated": "20230320160719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员方法"
				}
			]
		},
		{
			"ID": "20230320160926-jdtptzs",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230320160926-jdtptzs",
				"updated": "20230320163257"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "返回类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230320161631-v6opw6f",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "BlocksparseMatmulDGOp"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "初始化"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BlocksparseMatmulDGOp"
								},
								{
									"Type": "NodeText",
									"Data": "​对象"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20230320161634-riy3rih",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "Compute"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "void"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算梯度值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230320160719-7rgvvdb",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320160719-7rgvvdb",
				"updated": "20230320160719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员变量"
				}
			]
		},
		{
			"ID": "20230320161553-q5zfl0l",
			"Type": "NodeTable",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"colgroup": "||",
				"id": "20230320161553-q5zfl0l",
				"updated": "20230322145658"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "成员变量"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "变量类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​dw_out​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tensor*"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分配输出张量，梯度值的张量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​​dg​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tensor*"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分配输出张量，门控梯度的张量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​dw​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "const Tensor\u0026"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输入张量，权重梯度的张量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​w​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "const Tensor\u0026"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输入张量，权重的张量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​g​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "const Tensor\u0026"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "输入张量，门控的张量"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​stream​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CUstream"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算所在的 CUDA 流"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​BlocksparseGateGrad​​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "void"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算门控梯度和梯度值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230320160719-xxl8xfi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230320160719-xxl8xfi",
				"updated": "20230320160719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体代码"
				}
			]
		},
		{
			"ID": "20230320151515-9bxu1kt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230320151515-9bxu1kt",
				"updated": "20230320151515"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T, typename V\u003e\nclass BlocksparseMatmulDGOp : public OpKernel {\n public:\n  explicit BlocksparseMatmulDGOp(OpKernelConstruction* ctx) : OpKernel(ctx) { }\n\n  void Compute(OpKernelContext* ctx) override\n  {\n    const Tensor\u0026 dw = ctx-\u003einput(0);\n    const Tensor\u0026  w = ctx-\u003einput(1);\n    const Tensor\u0026  g = ctx-\u003einput(2);\n\n    uint blocks = dw.dim_size(0);\n    uint bsize  = dw.dim_size(1);\n\n    Tensor *dw_out;\n    Tensor *dg;\n    OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(0, dw.shape(), \u0026dw_out));\n    OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(1,  g.shape(), \u0026dg));\n\n    CUstream stream = ((CUDAStream*)ctx-\u003eop_device_context()-\u003estream()-\u003eimplementation())-\u003ecuda_stream();\n\n    BlocksparseGateGrad\u003cV\u003e(stream,\n      (V*)dw_out-\u003eflat\u003cT\u003e().data(),\n      dg-\u003eflat\u003cfloat\u003e().data(),\n      (const V*)dw.flat\u003cT\u003e().data(),\n      (const V*) w.flat\u003cT\u003e().data(),\n      g.flat\u003cfloat\u003e().data(),\n      blocks, bsize\n    );\n  }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230320151516-gnbv2mm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230320151516-gnbv2mm"
			}
		}
	]
}