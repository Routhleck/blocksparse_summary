{
	"ID": "20230320161634-riy3rih",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230320161634-riy3rih",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230320161634-m0swd6z\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230320161634-m0swd6z\u0026quot;,\u0026quot;scrollTop\u0026quot;:38,\u0026quot;focusId\u0026quot;:\u0026quot;20230320161634-m0swd6z\u0026quot;,\u0026quot;focusStart\u0026quot;:754,\u0026quot;focusEnd\u0026quot;:754}",
		"title": "void Compute",
		"updated": "20230321163925"
	},
	"Children": [
		{
			"ID": "20230321163735-lawy6zq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230321163735-lawy6zq",
				"updated": "20230321163854"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要处理各种参数然后调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230320155119-neurc48",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "BlocksparseGateGrad"
				},
				{
					"Type": "NodeText",
					"Data": "来进行计算，主要是求出"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dw_out"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dg"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230321163902-hiuqy8r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230321163902-hiuqy8r",
				"updated": "20230321163921"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dw_out"
				},
				{
					"Type": "NodeText",
					"Data": "​的计算结果是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "反向传播时的梯度值"
				},
				{
					"Type": "NodeText",
					"Data": "，它的形状与输入的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dw"
				},
				{
					"Type": "NodeText",
					"Data": "​一致，代表着原始输入的梯度信息。"
				}
			]
		},
		{
			"ID": "20230321163902-yj99qav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230321163902-yj99qav",
				"updated": "20230321163925"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "dg"
				},
				{
					"Type": "NodeText",
					"Data": "​的计算结果是BlocksparseMatmul的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Gate（门控）的梯度值"
				},
				{
					"Type": "NodeText",
					"Data": "，它的形状与输入的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "g"
				},
				{
					"Type": "NodeText",
					"Data": "​一致，代表着原始输入Gate的梯度信息。Gate的作用是控制前向传播中的哪些数据需要被过滤掉，因此它的梯度信息非常重要，可以帮助我们更好地训练模型。"
				}
			]
		},
		{
			"ID": "20230320161634-m0swd6z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230320161634-m0swd6z",
				"updated": "20230320161702"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Compute(OpKernelContext* ctx) override\n  {\n    const Tensor\u0026 dw = ctx-\u003einput(0);\n    const Tensor\u0026  w = ctx-\u003einput(1);\n    const Tensor\u0026  g = ctx-\u003einput(2);\n\n    uint blocks = dw.dim_size(0);\n    uint bsize  = dw.dim_size(1);\n\n    Tensor *dw_out;\n    Tensor *dg;\n    OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(0, dw.shape(), \u0026dw_out));\n    OP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(1,  g.shape(), \u0026dg));\n\n    CUstream stream = ((CUDAStream*)ctx-\u003eop_device_context()-\u003estream()-\u003eimplementation())-\u003ecuda_stream();\n\n    BlocksparseGateGrad\u003cV\u003e(stream,\n      (V*)dw_out-\u003eflat\u003cT\u003e().data(),\n      dg-\u003eflat\u003cfloat\u003e().data(),\n      (const V*)dw.flat\u003cT\u003e().data(),\n      (const V*) w.flat\u003cT\u003e().data(),\n      g.flat\u003cfloat\u003e().data(),\n      blocks, bsize\n    );\n  }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}